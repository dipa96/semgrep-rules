# This rule searches for a JavaScript source within the codebase and verifies if controllable user input passes through with any JavaScript sinks.
rules:
  - id: dom-xss-finder 
    message: |
      A potential user-input controlled parameter passing in a JavaScript sink was found.
    severity: ERROR
    languages:
      - JavaScript
    metadata:
      authors:
        - Donato Di Pasquale (@dipa996) (@ertataki) (@ddipa) 
      category: security
      references:
        - https://owasp.org/www-community/attacks/DOM_Based_XSS
    # This data-flow analysis feature tracks the flow of untrusted (tainted) data throughout the body of a function or method. Tainted data originate from tainted sources.
    mode: taint
    pattern-sources:
    # A source is a JavaScript property that accepts data that is potentially attacker-controlled.
        - pattern-either:
            - patterns:
              # Create pattern for match functions.
              - pattern-inside: |
                  $METHOD($FUNC(...,$PARAM,...))
              - pattern: $PARAM
            - patterns:
              - pattern-inside: |
                  $METHOD($FUNC()) {
                    ...
                  }
            - patterns:
              - pattern-inside: |
                  function $FUNC(..., $PARAM, ...) {
                    ...
                  };
              - pattern: $PARAM
            - patterns:
              - pattern-inside: |
                  function $FUNC(...) {
                    ...
                  }
            # Need to create patterns for listener
            # - patterns:
            #   - pattern-inside: |
            #       window.$LISTENER('message', function(e){
            #         ...
            #       }

        # List of known JavaScript Sources. 
        - pattern-either:
          - pattern: location
          - pattern: window.location
          - pattern: document.location
          - pattern: document.URL
          - pattern: window.name
          - pattern: document.referrer
          - pattern: document.documentURI
          - pattern: document.baseURI
          - pattern: document.cookie
          - pattern: document.URLUnencoded
          - pattern: document.baseURI
          - pattern: localStorage.getItem
          - pattern: sessionStorage.getItem
          # Make sense JSON.parse in sources?
          - pattern: JSON.parse
          - pattern: $OBJECT.data
          

    # Propagators - SemGrep ()
    pattern-propagators:
    # The push() method adds the specified elements to the end of an array and returns the new length of the array.
    - pattern: $T.push($F)
      from: $F
      to: $T
    # The shift() method removes the element at the zeroth index and shifts the values at consecutive indexes down, then returns the removed value.
    - pattern: $T.shift($F)
      from: $F
      to: $T
    #  The unshift() method adds the specified elements to the beginning of an array and returns the new length of the array.
    - pattern: $T.unshift($F)
      from: $F
      to: $T
    # The join() method creates and returns a new string by concatenating all of the elements in an array
    - pattern: $T.join($F)
      from: $F
      to: $T


    pattern-sinks:
    # A sink is a potentially dangerous JavaScript function or DOM object that can cause undesirable effects if attacker-controlled data is passed to it
      - patterns:
        - pattern-either:
        # Commons Sinks
          - pattern: eval(...)
          - pattern: Function(...)
          - pattern: execScript(...)
          # 4 check after
          # - pattern: execCommand(...)
          - pattern: createContextualFragment(...)
          # obsolete
          - pattern: generateCRMFRequest(...)
          - pattern: readAsArrayBuffer(...)
          - pattern: readAsBinaryString(...)
          - pattern: readAsDataURL(...)
          - pattern: readAsText(...)
          - pattern: readAsFile(...)
          - pattern: getFile(...)
          - pattern: $DOMELEMENT.href = $PARAM
          - pattern: $DOMELEMENT.action = $PARAM
          - pattern: $DOMELEMENT.evaluate(...)
          # The postMessage() method for sending web messages can lead to vulnerabilities if the event listener for receiving messages handles the incoming data in an unsafe way.
          - pattern: postMessage(...)
          # May cause FP but can found OpenRedirect too.
          - pattern: $DOMELEMENT.open(...)
          # mmm
          - pattern: $DOMELEMENT.send(...)
          - pattern: sessionStorage.setItem
          - pattern: localStorage.setItem
          - pattern: constructor()
          # Check next
          - pattern: history.pushState
          - pattern: history.replaceState
          - pattern: database
          - pattern: IndexedDB
          - pattern: $DOMELEMENT.open(...)
          #
          - pattern: setTimeout(...)
          - pattern: setInterval(...)
          - pattern: setImmediate(...)
          - pattern: msSetImmediate(...)
          - pattern: document.write(...)
          - pattern: document.writeln(...)
          # JSON.parse may cause false positives (FP) and not perform very well in sinks area
          # - pattern: JSON.parse(...)
          # Sinks variant
          - pattern: document.domain = $PARAM
          - pattern: location = $PARAM
          - pattern: location.href = $PARAM
          - pattern: $DOMELEMENT.replace(...)
          - pattern: location.assign(...)
          # Unsafe method/property
          - pattern: $DOMELEMENT.innerHTML = $PARAM
          - pattern: $DOMELEMENT.outerHTML = $PARAM
          - pattern: $DOMELEMENT.src = $PARAM
          - pattern: $DOMELEMENT.srcdoc = $PARAM
          - pattern: $DOMELEMENT.textContent = $PARAM
          - pattern: $DOMELEMENT.text = $PARAM
          - pattern: $DOMELEMENT.innerText = $PARAM
          - pattern: $DOMELEMENT.appendChild = $PARAM
          - pattern: $DOMELEMENT.appendChild(...)
          - pattern: $DOMELEMENT.append = $PARAM
          - pattern: $DOMELEMENT.insertAdjacentHTML(...)
          # JQuery Area
          # May False Positive(FP) with JQuery Selector , How to create a better rule?
          - pattern: $(...)
          - pattern: $.ajax(...)
          - pattern: $JQ.$(...)
          - pattern: $JQ.ajax(...)
          - pattern: $JQ.parseHTML(...)
          - pattern: $JQ.add(...)
          - pattern: $JQ.html(...)
          - pattern: $.globalEval(...)
          - pattern: $JQ.globalEval(...)
          - pattern: $JQ.has(...)
          - pattern: $JQ.index(...)
          - pattern: $JQ.append(...)
          - pattern: $JQ.appendTo(...)
          - pattern: $JQ.after(...)
          - pattern: $JQ.insertAfter(...)
          - pattern: $JQ.before(...)
          - pattern: $JQ.insertBefore(...)
          - pattern: $JQ.prepend(...)
          - pattern: $JQ.prependTo(...)
          - pattern: $JQ.replaceWith(...)
          - pattern: $JQ.replaceAll(...)
          - pattern: $JQ.wrap(...)
          - pattern: $JQ.wrapAll(...)
          - pattern: $JQ.wrapInner(...)
          - pattern: $JQ.prop.innerHTML(...)
          - pattern: $JQ.prop.outerHTML(...)
        

        # Avoid False Positive(FP)
        - pattern-not: $("...")
        # - pattern-not: .$PROPERTY = "..."
        # - pattern-not: .$PROPERTY += "..."
        - pattern-not: $DOMELEMENT.$PROPERTY = "..."
        - pattern-not: $DOMELEMENT.$PROPERTY += "..."
        - pattern-not: $DOMELEMENT.$PROPERTY("...")
        

    # Sanitizers
    pattern-sanitizers:
      - pattern: DOMPurify.sanitize(...)